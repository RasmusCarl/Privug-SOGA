// Code generated by stanc v2.32.0
#include <stan/model/model_header.hpp>
namespace clickgraph_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 24> locations_array__ =
  {" (found before start of program)",
  " (in '../../programs/STAN/clickgraph/clickgraph.stan', line 7, column 2 to column 31)",
  " (in '../../programs/STAN/clickgraph/clickgraph.stan', line 8, column 2 to column 38)",
  " (in '../../programs/STAN/clickgraph/clickgraph.stan', line 9, column 2 to column 30)",
  " (in '../../programs/STAN/clickgraph/clickgraph.stan', line 10, column 2 to column 30)",
  " (in '../../programs/STAN/clickgraph/clickgraph.stan', line 14, column 2 to column 24)",
  " (in '../../programs/STAN/clickgraph/clickgraph.stan', line 15, column 2 to column 22)",
  " (in '../../programs/STAN/clickgraph/clickgraph.stan', line 17, column 6 to column 27)",
  " (in '../../programs/STAN/clickgraph/clickgraph.stan', line 22, column 2 to column 23)",
  " (in '../../programs/STAN/clickgraph/clickgraph.stan', line 23, column 2 to column 31)",
  " (in '../../programs/STAN/clickgraph/clickgraph.stan', line 24, column 4 to column 33)",
  " (in '../../programs/STAN/clickgraph/clickgraph.stan', line 21, column 10 to line 25, column 2)",
  " (in '../../programs/STAN/clickgraph/clickgraph.stan', line 19, column 2 to column 31)",
  " (in '../../programs/STAN/clickgraph/clickgraph.stan', line 20, column 4 to column 33)",
  " (in '../../programs/STAN/clickgraph/clickgraph.stan', line 18, column 23 to line 21, column 4)",
  " (in '../../programs/STAN/clickgraph/clickgraph.stan', line 18, column 1 to line 25, column 2)",
  " (in '../../programs/STAN/clickgraph/clickgraph.stan', line 16, column 17 to line 26, column 3)",
  " (in '../../programs/STAN/clickgraph/clickgraph.stan', line 16, column 2 to line 26, column 3)",
  " (in '../../programs/STAN/clickgraph/clickgraph.stan', line 2, column 2 to column 8)",
  " (in '../../programs/STAN/clickgraph/clickgraph.stan', line 3, column 8 to column 9)",
  " (in '../../programs/STAN/clickgraph/clickgraph.stan', line 3, column 2 to column 39)",
  " (in '../../programs/STAN/clickgraph/clickgraph.stan', line 4, column 8 to column 9)",
  " (in '../../programs/STAN/clickgraph/clickgraph.stan', line 4, column 2 to column 39)",
  " (in '../../programs/STAN/clickgraph/clickgraph.stan', line 8, column 8 to column 9)"};
class clickgraph_model final : public model_base_crtp<clickgraph_model> {
 private:
  int N;
  std::vector<int> click0;
  std::vector<int> click1;
 public:
  ~clickgraph_model() {}
  clickgraph_model(stan::io::var_context& context__, unsigned int
                   random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "clickgraph_model_namespace::clickgraph_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 18;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 18;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 19;
      stan::math::validate_non_negative_index("click0", "N", N);
      current_statement__ = 20;
      context__.validate_dims("data initialization", "click0", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      click0 = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 20;
      click0 = context__.vals_i("click0");
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "click0", click0, 0);
      current_statement__ = 20;
      stan::math::check_less_or_equal(function__, "click0", click0, 1);
      current_statement__ = 21;
      stan::math::validate_non_negative_index("click1", "N", N);
      current_statement__ = 22;
      context__.validate_dims("data initialization", "click1", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      click1 = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 22;
      click1 = context__.vals_i("click1");
      current_statement__ = 22;
      stan::math::check_greater_or_equal(function__, "click1", click1, 0);
      current_statement__ = 22;
      stan::math::check_less_or_equal(function__, "click1", click1, 1);
      current_statement__ = 23;
      stan::math::validate_non_negative_index("unif", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + N + 1 + 1;
  }
  inline std::string model_name() const final {
    return "clickgraph_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.0",
             "stancflags = "};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "clickgraph_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ simAll = DUMMY_VAR__;
      current_statement__ = 1;
      simAll = in__.template read_constrain_lub<local_scalar_t__,
                 jacobian__>(0, 1, lp__);
      std::vector<local_scalar_t__> unif =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      current_statement__ = 2;
      unif = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
               jacobian__>(0, 1, lp__, N);
      local_scalar_t__ beta1 = DUMMY_VAR__;
      current_statement__ = 3;
      beta1 = in__.template read_constrain_lub<local_scalar_t__,
                jacobian__>(0, 1, lp__);
      local_scalar_t__ beta2 = DUMMY_VAR__;
      current_statement__ = 4;
      beta2 = in__.template read_constrain_lub<local_scalar_t__,
                jacobian__>(0, 1, lp__);
      {
        current_statement__ = 5;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(simAll, 0, 1));
        current_statement__ = 6;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(unif, 0, 1));
        current_statement__ = 17;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 7;
          lp_accum__.add(stan::math::uniform_lpdf<propto__>(beta1, 0, 1));
          current_statement__ = 15;
          if (stan::math::logical_lt(
                stan::model::rvalue(unif, "unif", stan::model::index_uni(i)),
                simAll)) {
            current_statement__ = 12;
            lp_accum__.add(stan::math::bernoulli_lpmf<propto__>(
                             stan::model::rvalue(click0, "click0",
                               stan::model::index_uni(i)), beta1));
            current_statement__ = 13;
            lp_accum__.add(stan::math::bernoulli_lpmf<propto__>(
                             stan::model::rvalue(click1, "click1",
                               stan::model::index_uni(i)), beta1));
          } else {
            current_statement__ = 8;
            lp_accum__.add(stan::math::uniform_lpdf<propto__>(beta2, 0, 1));
            current_statement__ = 9;
            lp_accum__.add(stan::math::bernoulli_lpmf<propto__>(
                             stan::model::rvalue(click0, "click0",
                               stan::model::index_uni(i)), beta1));
            current_statement__ = 10;
            lp_accum__.add(stan::math::bernoulli_lpmf<propto__>(
                             stan::model::rvalue(click1, "click1",
                               stan::model::index_uni(i)), beta2));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "clickgraph_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double simAll = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      simAll = in__.template read_constrain_lub<local_scalar_t__,
                 jacobian__>(0, 1, lp__);
      std::vector<double> unif =
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      unif = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
               jacobian__>(0, 1, lp__, N);
      double beta1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      beta1 = in__.template read_constrain_lub<local_scalar_t__,
                jacobian__>(0, 1, lp__);
      double beta2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      beta2 = in__.template read_constrain_lub<local_scalar_t__,
                jacobian__>(0, 1, lp__);
      out__.write(simAll);
      out__.write(unif);
      out__.write(beta1);
      out__.write(beta2);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ simAll = DUMMY_VAR__;
      simAll = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, simAll);
      std::vector<local_scalar_t__> unif =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      stan::model::assign(unif, in__.read<std::vector<local_scalar_t__>>(N),
        "assigning variable unif");
      out__.write_free_lub(0, 1, unif);
      local_scalar_t__ beta1 = DUMMY_VAR__;
      beta1 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, beta1);
      local_scalar_t__ beta2 = DUMMY_VAR__;
      beta2 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, beta2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ simAll = DUMMY_VAR__;
      simAll = context__.vals_r("simAll")[(1 - 1)];
      out__.write_free_lub(0, 1, simAll);
      std::vector<local_scalar_t__> unif =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      unif = context__.vals_r("unif");
      out__.write_free_lub(0, 1, unif);
      local_scalar_t__ beta1 = DUMMY_VAR__;
      beta1 = context__.vals_r("beta1")[(1 - 1)];
      out__.write_free_lub(0, 1, beta1);
      local_scalar_t__ beta2 = DUMMY_VAR__;
      beta2 = context__.vals_r("beta2")[(1 - 1)];
      out__.write_free_lub(0, 1, beta2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"simAll", "unif", "beta1", "beta2"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "simAll");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "unif" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "beta1");
    param_names__.emplace_back(std::string() + "beta2");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "simAll");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "unif" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "beta1");
    param_names__.emplace_back(std::string() + "beta2");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"simAll\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"unif\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"beta1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"simAll\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"unif\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"beta1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + N) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + N) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = clickgraph_model_namespace::clickgraph_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return clickgraph_model_namespace::profiles__;
}
#endif