// Code generated by stanc v2.32.0
#include <stan/model/model_header.hpp>
namespace bayespointmachine_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 26> locations_array__ =
  {" (found before start of program)",
  " (in '../../programs/STAN/bayespointmachine/bayespointmachine.stan', line 9, column 2 to column 18)",
  " (in '../../programs/STAN/bayespointmachine/bayespointmachine.stan', line 10, column 2 to column 22)",
  " (in '../../programs/STAN/bayespointmachine/bayespointmachine.stan', line 11, column 2 to column 22)",
  " (in '../../programs/STAN/bayespointmachine/bayespointmachine.stan', line 12, column 2 to column 22)",
  " (in '../../programs/STAN/bayespointmachine/bayespointmachine.stan', line 13, column 2 to column 22)",
  " (in '../../programs/STAN/bayespointmachine/bayespointmachine.stan', line 14, column 2 to column 22)",
  " (in '../../programs/STAN/bayespointmachine/bayespointmachine.stan', line 15, column 2 to column 22)",
  " (in '../../programs/STAN/bayespointmachine/bayespointmachine.stan', line 20, column 3 to column 22)",
  " (in '../../programs/STAN/bayespointmachine/bayespointmachine.stan', line 19, column 17 to line 21, column 3)",
  " (in '../../programs/STAN/bayespointmachine/bayespointmachine.stan', line 19, column 2 to line 21, column 3)",
  " (in '../../programs/STAN/bayespointmachine/bayespointmachine.stan', line 23, column 1 to column 67)",
  " (in '../../programs/STAN/bayespointmachine/bayespointmachine.stan', line 24, column 1 to column 67)",
  " (in '../../programs/STAN/bayespointmachine/bayespointmachine.stan', line 25, column 1 to column 67)",
  " (in '../../programs/STAN/bayespointmachine/bayespointmachine.stan', line 26, column 1 to column 67)",
  " (in '../../programs/STAN/bayespointmachine/bayespointmachine.stan', line 27, column 1 to column 67)",
  " (in '../../programs/STAN/bayespointmachine/bayespointmachine.stan', line 28, column 1 to column 67)",
  " (in '../../programs/STAN/bayespointmachine/bayespointmachine.stan', line 2, column 3 to column 18)",
  " (in '../../programs/STAN/bayespointmachine/bayespointmachine.stan', line 3, column 9 to column 10)",
  " (in '../../programs/STAN/bayespointmachine/bayespointmachine.stan', line 3, column 3 to column 22)",
  " (in '../../programs/STAN/bayespointmachine/bayespointmachine.stan', line 4, column 9 to column 10)",
  " (in '../../programs/STAN/bayespointmachine/bayespointmachine.stan', line 4, column 3 to column 22)",
  " (in '../../programs/STAN/bayespointmachine/bayespointmachine.stan', line 5, column 9 to column 10)",
  " (in '../../programs/STAN/bayespointmachine/bayespointmachine.stan', line 5, column 3 to column 22)",
  " (in '../../programs/STAN/bayespointmachine/bayespointmachine.stan', line 6, column 9 to column 10)",
  " (in '../../programs/STAN/bayespointmachine/bayespointmachine.stan', line 6, column 3 to column 21)"};
class bayespointmachine_model final : public model_base_crtp<bayespointmachine_model> {
 private:
  int N;
  std::vector<int> feat1;
  std::vector<int> feat2;
  std::vector<int> feat3;
  std::vector<double> obs;
 public:
  ~bayespointmachine_model() {}
  bayespointmachine_model(stan::io::var_context& context__, unsigned int
                          random_seed__ = 0, std::ostream*
                          pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "bayespointmachine_model_namespace::bayespointmachine_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 17;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 17;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 18;
      stan::math::validate_non_negative_index("feat1", "N", N);
      current_statement__ = 19;
      context__.validate_dims("data initialization", "feat1", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      feat1 = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 19;
      feat1 = context__.vals_i("feat1");
      current_statement__ = 20;
      stan::math::validate_non_negative_index("feat2", "N", N);
      current_statement__ = 21;
      context__.validate_dims("data initialization", "feat2", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      feat2 = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 21;
      feat2 = context__.vals_i("feat2");
      current_statement__ = 22;
      stan::math::validate_non_negative_index("feat3", "N", N);
      current_statement__ = 23;
      context__.validate_dims("data initialization", "feat3", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      feat3 = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 23;
      feat3 = context__.vals_i("feat3");
      current_statement__ = 24;
      stan::math::validate_non_negative_index("obs", "N", N);
      current_statement__ = 25;
      context__.validate_dims("data initialization", "obs", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      obs = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 25;
      obs = context__.vals_r("obs");
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 3 + 1 + 1 + 1 + 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "bayespointmachine_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.0",
             "stancflags = "};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "bayespointmachine_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<local_scalar_t__> w =
        std::vector<local_scalar_t__>(3, DUMMY_VAR__);
      current_statement__ = 1;
      w = in__.template read<std::vector<local_scalar_t__>>(3);
      local_scalar_t__ norm1 = DUMMY_VAR__;
      current_statement__ = 2;
      norm1 = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ norm2 = DUMMY_VAR__;
      current_statement__ = 3;
      norm2 = in__.template read_constrain_ub<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ norm3 = DUMMY_VAR__;
      current_statement__ = 4;
      norm3 = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ norm4 = DUMMY_VAR__;
      current_statement__ = 5;
      norm4 = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ norm5 = DUMMY_VAR__;
      current_statement__ = 6;
      norm5 = in__.template read_constrain_ub<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ norm6 = DUMMY_VAR__;
      current_statement__ = 7;
      norm6 = in__.template read_constrain_ub<local_scalar_t__,
                jacobian__>(0, lp__);
      {
        current_statement__ = 10;
        for (int i = 1; i <= 3; ++i) {
          current_statement__ = 8;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(w, "w",
                             stan::model::index_uni(i)), 0, 1));
        }
        current_statement__ = 11;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(norm1,
                         (((stan::model::rvalue(feat1, "feat1",
                              stan::model::index_uni(1)) *
                         stan::model::rvalue(w, "w",
                           stan::model::index_uni(1))) +
                         (stan::model::rvalue(feat2, "feat2",
                            stan::model::index_uni(1)) *
                         stan::model::rvalue(w, "w",
                           stan::model::index_uni(2)))) +
                         (stan::model::rvalue(feat3, "feat3",
                            stan::model::index_uni(1)) *
                         stan::model::rvalue(w, "w",
                           stan::model::index_uni(3)))), 0.1));
        current_statement__ = 12;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(norm2,
                         (((stan::model::rvalue(feat1, "feat1",
                              stan::model::index_uni(2)) *
                         stan::model::rvalue(w, "w",
                           stan::model::index_uni(1))) +
                         (stan::model::rvalue(feat2, "feat2",
                            stan::model::index_uni(2)) *
                         stan::model::rvalue(w, "w",
                           stan::model::index_uni(2)))) +
                         (stan::model::rvalue(feat3, "feat3",
                            stan::model::index_uni(2)) *
                         stan::model::rvalue(w, "w",
                           stan::model::index_uni(3)))), 0.1));
        current_statement__ = 13;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(norm3,
                         (((stan::model::rvalue(feat1, "feat1",
                              stan::model::index_uni(3)) *
                         stan::model::rvalue(w, "w",
                           stan::model::index_uni(1))) +
                         (stan::model::rvalue(feat2, "feat2",
                            stan::model::index_uni(3)) *
                         stan::model::rvalue(w, "w",
                           stan::model::index_uni(2)))) +
                         (stan::model::rvalue(feat3, "feat3",
                            stan::model::index_uni(3)) *
                         stan::model::rvalue(w, "w",
                           stan::model::index_uni(3)))), 0.1));
        current_statement__ = 14;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(norm4,
                         (((stan::model::rvalue(feat1, "feat1",
                              stan::model::index_uni(4)) *
                         stan::model::rvalue(w, "w",
                           stan::model::index_uni(1))) +
                         (stan::model::rvalue(feat2, "feat2",
                            stan::model::index_uni(4)) *
                         stan::model::rvalue(w, "w",
                           stan::model::index_uni(2)))) +
                         (stan::model::rvalue(feat3, "feat3",
                            stan::model::index_uni(4)) *
                         stan::model::rvalue(w, "w",
                           stan::model::index_uni(3)))), 0.1));
        current_statement__ = 15;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(norm5,
                         (((stan::model::rvalue(feat1, "feat1",
                              stan::model::index_uni(5)) *
                         stan::model::rvalue(w, "w",
                           stan::model::index_uni(1))) +
                         (stan::model::rvalue(feat2, "feat2",
                            stan::model::index_uni(5)) *
                         stan::model::rvalue(w, "w",
                           stan::model::index_uni(2)))) +
                         (stan::model::rvalue(feat3, "feat3",
                            stan::model::index_uni(5)) *
                         stan::model::rvalue(w, "w",
                           stan::model::index_uni(3)))), 0.1));
        current_statement__ = 16;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(norm6,
                         (((stan::model::rvalue(feat1, "feat1",
                              stan::model::index_uni(6)) *
                         stan::model::rvalue(w, "w",
                           stan::model::index_uni(1))) +
                         (stan::model::rvalue(feat2, "feat2",
                            stan::model::index_uni(6)) *
                         stan::model::rvalue(w, "w",
                           stan::model::index_uni(2)))) +
                         (stan::model::rvalue(feat3, "feat3",
                            stan::model::index_uni(6)) *
                         stan::model::rvalue(w, "w",
                           stan::model::index_uni(3)))), 0.1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "bayespointmachine_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<double> w =
        std::vector<double>(3, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      w = in__.template read<std::vector<local_scalar_t__>>(3);
      double norm1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      norm1 = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      double norm2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      norm2 = in__.template read_constrain_ub<local_scalar_t__,
                jacobian__>(0, lp__);
      double norm3 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      norm3 = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      double norm4 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      norm4 = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      double norm5 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      norm5 = in__.template read_constrain_ub<local_scalar_t__,
                jacobian__>(0, lp__);
      double norm6 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      norm6 = in__.template read_constrain_ub<local_scalar_t__,
                jacobian__>(0, lp__);
      out__.write(w);
      out__.write(norm1);
      out__.write(norm2);
      out__.write(norm3);
      out__.write(norm4);
      out__.write(norm5);
      out__.write(norm6);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> w =
        std::vector<local_scalar_t__>(3, DUMMY_VAR__);
      stan::model::assign(w, in__.read<std::vector<local_scalar_t__>>(3),
        "assigning variable w");
      out__.write(w);
      local_scalar_t__ norm1 = DUMMY_VAR__;
      norm1 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, norm1);
      local_scalar_t__ norm2 = DUMMY_VAR__;
      norm2 = in__.read<local_scalar_t__>();
      out__.write_free_ub(0, norm2);
      local_scalar_t__ norm3 = DUMMY_VAR__;
      norm3 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, norm3);
      local_scalar_t__ norm4 = DUMMY_VAR__;
      norm4 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, norm4);
      local_scalar_t__ norm5 = DUMMY_VAR__;
      norm5 = in__.read<local_scalar_t__>();
      out__.write_free_ub(0, norm5);
      local_scalar_t__ norm6 = DUMMY_VAR__;
      norm6 = in__.read<local_scalar_t__>();
      out__.write_free_ub(0, norm6);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> w =
        std::vector<local_scalar_t__>(3, DUMMY_VAR__);
      w = context__.vals_r("w");
      out__.write(w);
      local_scalar_t__ norm1 = DUMMY_VAR__;
      norm1 = context__.vals_r("norm1")[(1 - 1)];
      out__.write_free_lb(0, norm1);
      local_scalar_t__ norm2 = DUMMY_VAR__;
      norm2 = context__.vals_r("norm2")[(1 - 1)];
      out__.write_free_ub(0, norm2);
      local_scalar_t__ norm3 = DUMMY_VAR__;
      norm3 = context__.vals_r("norm3")[(1 - 1)];
      out__.write_free_lb(0, norm3);
      local_scalar_t__ norm4 = DUMMY_VAR__;
      norm4 = context__.vals_r("norm4")[(1 - 1)];
      out__.write_free_lb(0, norm4);
      local_scalar_t__ norm5 = DUMMY_VAR__;
      norm5 = context__.vals_r("norm5")[(1 - 1)];
      out__.write_free_ub(0, norm5);
      local_scalar_t__ norm6 = DUMMY_VAR__;
      norm6 = context__.vals_r("norm6")[(1 - 1)];
      out__.write_free_ub(0, norm6);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"w", "norm1", "norm2", "norm3",
                "norm4", "norm5", "norm6"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(3)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      param_names__.emplace_back(std::string() + "w" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "norm1");
    param_names__.emplace_back(std::string() + "norm2");
    param_names__.emplace_back(std::string() + "norm3");
    param_names__.emplace_back(std::string() + "norm4");
    param_names__.emplace_back(std::string() + "norm5");
    param_names__.emplace_back(std::string() + "norm6");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      param_names__.emplace_back(std::string() + "w" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "norm1");
    param_names__.emplace_back(std::string() + "norm2");
    param_names__.emplace_back(std::string() + "norm3");
    param_names__.emplace_back(std::string() + "norm4");
    param_names__.emplace_back(std::string() + "norm5");
    param_names__.emplace_back(std::string() + "norm6");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"w\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"norm1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"norm2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"norm3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"norm4\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"norm5\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"norm6\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"w\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"norm1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"norm2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"norm3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"norm4\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"norm5\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"norm6\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((3 + 1) + 1) + 1) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((3 + 1) + 1) + 1) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = bayespointmachine_model_namespace::bayespointmachine_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return bayespointmachine_model_namespace::profiles__;
}
#endif